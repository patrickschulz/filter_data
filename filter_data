#! /usr/bin/lua

local lapp = require "pl.lapp"

local args = lapp[[
    Filter simulation data
        <xindex> (number)               index of x data
        <yindex> (number)               index if y data
        <filename> (string)             filename of data
        -s,--separator (default ",")    data entry separator
        -r,--reduce (default 0)         reduce number of points to this value (if > 0)
        -n,--nofilter                   don't filter data (automatically remove redundant points)
        --digital                       interpret data as digital data, use with --threshold
        --threshold (default 0.0)       threshold for digital data
        --xstart (default -1e32)        minimum x datum
        --xend (default 1e32)           maximum x datum
        --xscale (default 1)            factor for scaling x data
        --yscale (default 1)            factor for scaling y data
        --xprecision (default 1e-3)     decimal digits for x data
        --yprecision (default 1e-3)     decimal digits for y data
]]

local filename = args.filename
if not filename then
    print("no filename given")
    return
end

function read_raw_data(filename)
    local raw = {}
    local file = io.open(filename)
    while true do
        local line = file:read()
        if not line then
            break
        end
        table.insert(raw, line)
    end
    file:close()
    return raw
end

local function quantize(num, level)
    return level * math.floor(num / level + 0.5)
end

function parse_raw_data(raw)
    local header = raw[1]
    local data = {}
    local gfmt = "[^" .. args.separator .. "]+"
    for i = 2, #raw do
        local line = raw[i]
        local entry = {}
        local i = 1
        local insert = true
        for e in string.gmatch(line, gfmt) do
            local num = tonumber(e)
            if i == args.xindex then
                local x = quantize(args.xscale * tonumber(e), args.xprecision)
                if x < args.xstart or x > args.xend then
                    insert = false
                end
                entry.x = x
            elseif i == args.yindex then
                local y = quantize(args.yscale * tonumber(e), args.yprecision)
                if args.digital then
                    if y > args.threshold then
                        y = 1
                    else
                        y = 0
                    end
                end
                entry.y = y
            end
            i = i + 1
        end
        if insert then
            table.insert(data, entry)
        end
    end
    return header, data
end

function filter_data(data)
    local out = {}

    -- always print the first point
    local x, y = data[1].x, data[1].y
    table.insert(out, { x = x, y = y })

    local lasty = y
    for i = 2, #data - 1 do
        local x, y = data[i].x, data[i].y
        if math.abs(y - lasty) >= args.yprecision then
            table.insert(out, { x = x, y = y })
        end
        lasty = y
    end

    -- always print the last point
    local x, y = data[#data].x, data[#data].y
    table.insert(out, { x = x, y = y })

    return out
end

function reduce_data(data, points)
    return data
end

function print_data(data)
    local xdecimals = -math.ceil(math.log(args.xprecision, 10))
    local ydecimals = -math.ceil(math.log(args.yprecision, 10))
    local xdigits = xdecimals + 1 + 0
    local fmt = string.format("%%%d.%df %%%d.%df", 0, xdecimals, 0, ydecimals)
    for _, entry in ipairs(data) do
        print(string.format(fmt, entry.x, entry.y))
    end
end

local raw = read_raw_data(filename)
local header, data = parse_raw_data(raw)
if not args.nofilter then
    data = filter_data(data)
end
if args.reduce > 0 then
    data = reduce_data(data, args.reduce)
end
print_data(data)
